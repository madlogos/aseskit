% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api.R
\name{get_api_data}
\alias{get_api_data}
\title{Get data from given API URL(s)}
\usage{
get_api_data(api_urls, use_curl = TRUE, parse_json = TRUE, time = 0,
  encoding = NULL, messaging = FALSE, name_out = vapply(api_urls,
  attr, which = "name_out", FUN.VALUE = character(1L)), drop = FALSE,
  ...)
}
\arguments{
\item{api_urls}{character list comprising of API URL lists that are of 'url' class.
If a vector is given, the function will wrap it into a list.}

\item{use_curl}{logical, whether use \code{curl}. Default TRUE. You can use
\code{\link{check_curl}()} to check if curl is available for the api_urls before
you begin to read data.}

\item{parse_json}{logical, whether parse the output JSON character to R data.
If TRUE, \code{\link[jsonlite]{fromJSON}()} will be called to parse the character.
Default TRUE.}

\item{time}{numeric, the time interval to access the api_urls, in seconds.
It is used to avoid overuse of the APIs. Default 0.}

\item{encoding}{character, the encoding of the API. Default NULL, indicating
that the function will automatically select an encoding for specific APIs.
The accepted 'encoding' is consistent with that in \code{\link{readLines}()}.
You can set it to 'unknown', while in some cases, you need to assign a valid
encoding value, e.g., 'UTF-8'.}

\item{messaging}{logical, whether print messages when processing. Default FALSE.}

\item{name_out}{character vector, the names of the output list. Default is set to
\code{api_url}'s 'name_out' attribute. If NULL, the output will have no names.}

\item{drop}{logical, whether unlist the result when there is only one list returned.
Default FALSE, which indicates that you will need to extract the result first.
Note that if you set \code{drop} = TRUE, then the result will be \code{unclass}ed.}

\item{...}{other arguments to pass to the function.}
}
\value{
a list comprising of 'api_data' objects. The 'api_data' class includes
several useful subclasses, e.g. 'google_geocode', 'google_revgeocode', 'baidu_geocode',
'baidu_revgeocode', 'gaode_geocode', 'gaode_revgeocode', and 'ipify_geohost',
'ipinfo_geohost', 'ipstack_geohost', ... in \pkg{\link{asesgeo}}.
\itemize{
 \item parse_json == FALSE: a list containing JSON strings
 \item parse_json == TRUE: a list containing parsed data
}
}
\description{
Get data from given API URL(s)
}
\examples{
\dontrun{
api_urls <- c('<API 1>', '<API 2>', ...)
get_api_data(api_urls)
}
}
\author{
Yiying Wang, \email{wangy@aetna.com}
}
