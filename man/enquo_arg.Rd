% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{enquo_arg}
\alias{enquo_arg}
\alias{enquo_args}
\title{Enquo function argument(s) to quosure}
\usage{
enquo_arg(..., datamask = NULL, named = FALSE,
  flatten_mono = match.call()[1L] == "enquo_arg()")

enquo_args(..., datamask = NULL, named = FALSE,
  flatten_mono = match.call()[1L] == "enquo_arg()")
}
\arguments{
\item{...}{argument list, either one or a list of character (\code{"x"}),
name (\code{x}) or formula (\code{~x}).}

\item{datamask}{environment for \code{\link[rlang]{eval_tidy}()} to parse.
Default NULL. You are encouraged to pass the mask ennvironment using
\code{\link[rlang]{as_data_mask}()}.}

\item{named}{logical, whether name the \code{enquo}-ed dots. Default FALSE.}

\item{flatten_mono}{logical, whether break the structure and only retain the
first element of the output list when there is only one argument passed in.
If has no effect when there are multiple arguments. \itemize{
\item if \code{enquo_arg} is called, default TRUE \cr
\item if \code{enquo_args} is called, default FALSE
}}
}
\value{
A quosure (\code{...} contains only one argument) or a list of quosure
(\code{...} contains multiple arguments), depending on the length of argument
 list and \code{flatten_mono}.
}
\description{
This function can be used inside a function to \code{\link[rlang]{enquo}()} an
argument to a \code{\link[rlang]{quosure}}. By this means, you can work with
non-standard evaluation functions (e.g., \pkg{ggplot2}, \pkg{dplyr}) with ease. \cr
You can feed character, symbol, name or formula to the function. But if a value
instead of an expression is given, quasi-quotation will not take effect, and
thus, NULL will be returned.
}
\examples{
\dontrun{
enquo_arg(a)  # returns a single quosure
# <quosure>
# expr: ^a
# env:  empty

enquo_args(a)  # returns a list of single quosure
# [[1]]
# <quosure>
# expr: ^a
# env:  empty

enquo_arg(a, b)  # retuns a quosure list, equal to enquo_args(a, b)
# [[1]]
# <quosure>
# expr: ^a
# env:  empty
# [[2]]
# <quosure>
# expr: ^b
# env:  empty

enquo_arg(6)  # returns NULL

# ------ A real-world use case -------
library(dplyr)
fun <- function(data, by, on){
    by <- enquo_arg(by)
    on <- enquo_arg(on)
    data \%>\% group_by(!! by) \%>\%
        summarise(avg=mean(!! on, na.rm=TRUE), sd=sd(!! on, na.rm=TRUE))
}
fun(mtcars, am, mpg)  # yields
##  A tibble: 2 x 3
#      am   avg    sd
#   <dbl> <dbl> <dbl>
# 1     0  17.1  3.83
# 2     1  24.4  6.17

# can also be written as
fun(mtcars, 'am', 'mpg')  # or
fun(mtcars, ~am, ~mpg)

# Without enquo_arg, fun will encounter an "object not found" error
# due to non-standard evaluation.
}

}
\seealso{
Quasi-quotation in \pkg{\link{rlang}}
}
\author{
Yiying Wang, \email{wangy@aetna.com}
}
