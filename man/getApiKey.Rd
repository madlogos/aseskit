% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api_key.R
\name{getApiKey}
\alias{getApiKey}
\alias{get_api_key}
\alias{setApiKey}
\alias{set_api_key}
\title{Get the API key}
\usage{
getApiKey(app = c("google", "baidu", "gaode", "ipstack", "ipify",
  "ipinfo"), overide = FALSE, drop = TRUE, ...)

get_api_key(app = c("google", "baidu", "gaode", "ipstack", "ipify",
  "ipinfo"), overide = FALSE, drop = TRUE, ...)

setApiKey(app = c("google", "baidu", "gaode", "ipstack", "ipify",
  "ipinfo"), key = NULL, gen_pem = FALSE, ...)

set_api_key(app = c("google", "baidu", "gaode", "ipstack", "ipify",
  "ipinfo"), key = NULL, gen_pem = FALSE, ...)
}
\arguments{
\item{app}{character vector of the application name for the API, either 'google',
'baidu', 'gaode', 'ipstack', 'ipinfo' or 'ipify'.}

\item{overide}{logical, whether flush the stored API key and call a GUI wizard
to enter a new one. Default FALSE to enable reusing the keys.}

\item{drop}{logical, whether coerce the result to a named vector. Default TRUE.
If FALSE, you will get a named list instead.}

\item{...}{other arguments. For instance, \describe{
\item{Args of \code{\link{input_char}()} to call a GUI wizard for input}{
 \itemize{
  \item prompt: prompt label of the GUI frame \cr
  \item caption: caption of the GUI window \cr
  \item default: default value for the input box \cr
  \item gui: 'Rstudioapi', 'Gwidgets' or 'WinGui'.
 }}
}}

\item{key}{character vector or list, value(s) of the API key(s). You can directly
assign corresponding values here. Default NULL (gui mode), indicating that a
GUI wizard will be launched for you to enter the API key respectively.
Generally, gui mode is more secure.}

\item{gen_pem}{logical, whether generate .pem files in the \code{\link{tempdir}()}.
Default FALSE.}
}
\value{
invisible. You must assign it to an object.
}
\description{
Get the API key(s). It is usually used in a function call chain that makes use
of Google or Baidu map APIs, e.g., \code{geocode}.
}
\details{
If the encrpyted API key(s) have been previously stored in the package
hidden environment \code{pkgenv$API_KEY}, the function will extract it after an
auto decryption. If not previously stored in \code{pkgenv}, a GUI wizard
(\code{inputChar}) will be launched for you to enter the key(s). \cr
When you encounter an API error, please either \itemize{
\item set \code{overide=TRUE} to re-enter the key, or \cr
\item directly call \code{set_api_key} to do so. Each time you load \pkg{aseshms},
 you only need to set the API keys once.
}
}
\note{
Do not disclose the key to anyone as it may cause data leakage.
}
\examples{
\dontrun{
get_api_key('google', gui='WinGui')
get_api_key()  # you will get all the api keys

# if the api keys have been written to .pem files
set_api_key('baidu', <YOUR BAIDU API KEY>, gen_pem=TRUE)
key <- decrypt_it(get_raw_pwd(pem='baidu'))
}
\dontrun{
#' key <- <YOUR BAIDU API KEY>  # not recommended: keys are exposed
setApiKey('baidu', key=key)
setApiKey('baidu', key=NULL)  # recommended

# set multiple API keys
set_api_key(app=c("google", "baidu", "gaode", "ipstack", "ipinfo", "ipify"),
            key=<THE CORRESPONDING KEY CHARACTER VECTOR>)  # not recommended
set_api_key()  # pop up a series of GUI windows to input all the API keys
}
}
\seealso{
\code{\link{input_char}()}, \code{\link{get_raw_pwd}()}
}
\author{
Yiying Wang, \email{wangy@aetna.com}
}
